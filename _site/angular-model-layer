<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>A Practical Angular Model Layer || Chrysanthium</title>
    <link rel="stylesheet" href="/css/index.css">
    <link rel="stylesheet" href="/css/post.css">
    <link rel="stylesheet" href="/css/tomorrow.css">
  </head>

  <body>
    <header class="navigation">
      <ul>
        <li>
          <a href="/">Blog</a>
        </li>

        <li>
          <a href="/about">About</a>
        </li>
      </ul>
    </header>

    <h1>A Practical Angular Model Layer</h1>
    
      <h6>2015/08</h6>
    

    <p>In the Java enterprise world you often have entities and/or data access objects that encapsulate attributes of an object. We want a similar domain model which wraps the truth in a form we can work with. The following pattern powered by <a href="https://lodash.com/">lodash</a> enables this behavior assuming an HATEOAS REST API.</p>
<p>The common web application architecture for the last decade was dominated by the MVC pattern which is the unachievable idea of a clear definition and separation of application layers. The modern approach to web development replaces this either with more practical models like <a href="https://facebook.github.io/flux/docs/overview.html">Flux</a> or they don't focus on it - <em>MVWhatever</em> - and implement a practical approach like Angular.</p>
<p>The view in Angular appears to be clearly defined with the scope but gets enriched with logic either by directives or with plain instructions. Being able to call functions from view and bidirectional data binding to a model value is convenient.</p>
<p>You'd think that controllers are clearly defined by name, but they would be better described as view-model.</p>
<p>That leaves us with the actual model, which is often described as the source of truth in backend terminology. The truth in the frontend is retrieved via services as resources from the backend services which in turn get theirs from the database.</p>
<p>I propose the following pattern for the model layer:</p>
<pre class="language-js"><code class="language-js">angular<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">resource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> self <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>
        <span class="token comment">// Resource attributes</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      resource
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    _<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// Resource functions</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> self<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  _<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>User<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// Global resource functions</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> User<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>The bonuses you get from this pattern are:</p>
<ul>
<li>The clear separation of resource attributes and functions where you can transform the resource from the service, e.g. by omitting certain values, renaming or extending them:</li>
</ul>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> self <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">fullname</span><span class="token operator">:</span> <span class="token punctuation">[</span>resource<span class="token punctuation">.</span>firstname<span class="token punctuation">,</span> resource<span class="token punctuation">.</span>lastname<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  _<span class="token punctuation">.</span><span class="token function">omit</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"firstname"</span><span class="token punctuation">,</span> <span class="token string">"lastname"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>The ability to add global functions, e.g. getting an <code>Address</code> instance from a resource:</li>
</ul>
<pre class="language-js"><code class="language-js">_<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>Address<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">fromResource</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Which really shines if you do HATEOAS, e.g. you could now get all addresses from a link in the <code>User</code> resource resource via another global <code>User</code> method:</p>
<pre class="language-js"><code class="language-js"><span class="token function-variable function">getAddresses</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token string">'addresses'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resources</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>resources<span class="token punctuation">.</span><span class="token function">embedded</span><span class="token punctuation">(</span><span class="token string">'addresses'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Address<span class="token punctuation">.</span><span class="token function">fromResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>


    <footer class="navigation">
      <ul>
        <li>
          <a href="/privacy">Privacy</a>
        </li>

        <li>
          <a href="/legal">Legal</a>
        </li>
      </ul>
    </footer>
  </body>
</html>

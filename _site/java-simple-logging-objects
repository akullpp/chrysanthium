<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Java: Simple Logging Objects || Chrysanthium</title>
    <link rel="stylesheet" href="/css/index.css">
    <link rel="stylesheet" href="/css/post.css">
    <link rel="stylesheet" href="/css/tomorrow.css">
  </head>

  <body>
    <header class="navigation">
      <ul>
        <li>
          <a href="/">Blog</a>
        </li>

        <li>
          <a href="/about">About</a>
        </li>
      </ul>
    </header>

    <h1>Java: Simple Logging Objects</h1>
    
      <h6>2019/07</h6>
    

    <p>My favorite way to do traditional logging in Java is to utilize the simple class name which is often suitable for most reasonably complex cases, i.e. <code>class#getName</code> would additionally return the entire package path (e.g. <code>com.example.foo.Bar</code>) where as <code>class#getSimpleName</code> returns only the name of the class (e.g. <code>Bar</code>):</p>
<pre class="language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>However if stuff becomes complex or you use different configuration depending on package identifiers you won't be able to do this but I think it is a good practice to start simple.</p>
<p>To log an object I like to overwrite the <code>toString</code> method with the <code>org.apache.commons.lang3.builder.ReflectionToStringBuilder</code>:</p>
<pre class="language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ReflectionToStringBuilder</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>It provides a nice initial setup in reasonable cases to evolve from but if you have a security manager or non-thread-safe classes it will fail and you will see performance issues.</p>


    <footer class="navigation">
      <ul>
        <li>
          <a href="/privacy">Privacy</a>
        </li>

        <li>
          <a href="/legal">Legal</a>
        </li>
      </ul>
    </footer>
  </body>
</html>
